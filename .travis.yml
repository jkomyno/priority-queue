language: cpp

cache:
  - directories:
    - $HOME/.cache

# avoid building again after we just published something
branches:
  except:
    - /^*-v[0-9]*/
    - /^*-untagged*/

notifications:
  email:
    on_success: change
    on_failure: change

stages:
  - test
  - name: deploy
    if: branch = master

env:
  global:
    # Bazel version
    - V_BAZEL=3.1.0

# Execute unit tests in Linux and MacOSX with the latest stable versions of
# g++ and clang++
jobs:
  include:
    - stage: test
      os: linux
      dist: xenial
      before_install: chmod +x ./.ci/install_linux.sh
      install: ./.ci/install_linux.sh
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
      env:
        - MATRIX_EVAL="CXX=g++-9"
        - CC="g++-9"

    - stage: test
      os: linux
      dist: xenial
      before_install: chmod +x ./.ci/install_linux.sh
      install: ./.ci/install_linux.sh
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - clang-10
      env:
        - MATRIX_EVAL="CXX=clang++-10"
        - CC="clang++-10"
    
    - stage: test
      os: osx
      osx_image: xcode11.3
      before_install: chmod +x ./.ci/install_darwin.sh
      install: ./.ci/install_darwin.sh
      env:
        - MATRIX_EVAL="CXX=clang++"
        - CC="clang++"

    - stage: deploy
      before_script: skip
      script: skip
      install: skip
      before_deploy:
        # prepare release folder
        - tar -czf ./priority-queue.tar.gz ./priority_queue/*.h
        - export DEPLOY_PACKAGE=./priority-queue.tar.gz
        - echo "DEPLOY_PACKAGE is ${DEPLOY_PACKAGE}"
      deploy:
        provider: releases
        api_key: $GITHUB_TOKEN
        file:
        - README.md
        - $DEPLOY_PACKAGE
        skip_cleanup: true
        overwrite: true
        on:
          # Releases deployment will trigger if and only if the build is a tagged build on branch master
        tags: false # (TODO: tags: true)
        branch: master
        # releases will only be visible to collaborators (TODO: remove)
        draft: true

before_script:
  - eval "${MATRIX_EVAL}"

script:
  - find . -name "*.h" -o -name "*.cpp" -exec clang-format -i {} \;
  # throw error if the project doesn't follow clang-format
  - git diff --exit-code

  # run unit tests
  - |
    bazel \
      --output_base=$HOME/.cache/bazel \
      --batch \
      --host_jvm_args=-Xmx500m \
      --host_jvm_args=-Xms500m \
      test //...
